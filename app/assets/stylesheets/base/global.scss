body {
  padding-top: 50px;
  padding-left: 25px;
  padding-right: 25px;
  padding-bottom: 25px;
  background-color: $ColorDark;
}
//fixing text for dark background

// scss for buttons


.flex-center {
  align-items: center;
  justify-content: center;


}
.text-center {
  text-align: center;
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  padding-left: 1em;
  padding-right: 1em;
}

.hr-small {
  height: 3px;
  width: 4em;
  margin: 1em;
  background-color: $ColorBlue;
  margin: 0 auto;

}

.container-top {
    margin-top: 7em;
}

.container-light {
  background-color: $ColorWhite;
  border-radius: 5px;
  padding-left: 1em;
  padding-right: 1em;
  box-shadow: $DropShadowDark;
  margin-bottom: 1em;
}


.round {
  border-radius: 50%;
}

/* error messages */
#error_explanation {
  color: red;
  ul {
    color: red;
    margin: 0 0 30px 0;
  }
}

.field_with_errors {
  @extend .has-error;
  .form-control {
    color: $state-danger-text;
  }
}

.form-signin {
    max-width: 300px;
    margin: 0 auto;
    padding-top: 5em;
    img {
      width: 12em;
      height: auto;
    }
  }


@mixin transition($property) {
  transition: $property 0.10s ease-in-out ;
}

@mixin breakpoint($breakpoint, $query: 'min-width') {
  $breakpoints: (
  'bp-small': $screen-xs-min,
  'bp-medium': $screen-sm-min,
  'bp-large': $screen-md-min,
  'bp-huge': $screen-lg-min,
  );
  @if map-has-key($breakpoints, $breakpoint) {
    @media (#{$query}: map-get($breakpoints, $breakpoint)) { @content; }
  } @else {
    @warn 'No breakpoint found for `#{$breakpoint}`. Allowed values are: #{map-keys($breakpoints)}.';
  }

}

.header-block {
  height: 4em;
  width: 100%;

}
